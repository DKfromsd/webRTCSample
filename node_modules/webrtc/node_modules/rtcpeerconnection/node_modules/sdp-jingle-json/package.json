{
  "name": "sdp-jingle-json",
  "version": "1.0.0",
  "description": "A parser/serializer for SDP to JSON. Useful for converting SDP to other formats like Jingle for WebRTC signalling",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/legastero/sdp-jingle-json.git"
  },
  "bugs": {
    "url": "https://github.com/legastero/sdp-jingle-json/issues"
  },
  "keywords": [
    "sdp",
    "webrtc",
    "xmpp",
    "jingle"
  ],
  "contributors": [
    {
      "name": "Lance Stout",
      "email": "lance@andyet.net"
    },
    {
      "name": "Philipp Hancke",
      "email": "fippo@goodadvice.pages.de"
    }
  ],
  "license": "MIT",
  "dependencies": {},
  "devDependencies": {
    "browserify": "2.36.1",
    "grunt": "0.4.2",
    "grunt-browserify": "1.2.11",
    "grunt-contrib-jshint": "0.7.2",
    "grunt-contrib-uglify": "0.2.7",
    "precommit-hook": "0.3.8",
    "tape": "2.3.0"
  },
  "testling": {
    "files": [
      "test/test.js"
    ],
    "browsers": [
      "ie/10..latest",
      "chrome/20..latest",
      "chrome/canary",
      "firefox/10..latest",
      "firefox/nightly",
      "opera/next",
      "safari/6..latest",
      "iphone/6..latest",
      "ipad/6..latest",
      "android-browser/4.2..latest"
    ]
  },
  "scripts": {
    "test": "node test/test.js"
  },
  "readme": "# SDP-Jingle-JSON\n**Convert SDP blobs to and from JSON**\n\n[![Build Status](https://travis-ci.org/legastero/sdp-jingle-json.png)](https://travis-ci.org/legastero/sdp-jingle-json)\n[![Dependency Status](https://david-dm.org/legastero/sdp-jingle-json.png)](https://david-dm.org/legastero/sdp-jingle-json)\n[![devDependency Status](https://david-dm.org/legastero/sdp-jingle-json/dev-status.png)](https://david-dm.org/legastero/sdp-jingle-json#info=devDependencies)\n\n[![Browser Support](https://ci.testling.com/legastero/sdp-jingle-json.png)](https://ci.testling.com/legastero/sdp-jingle-json)\n\n\n## What is this?\n\nEver taken a peek at the data blobs that get sent back and forth in WebRTC\nsignalling? Yeah, that mess of line-oriented data is SDP. But sometimes\nyou want to have that data available in JSON, like if you want to use XMPP\nJingle for signalling.\n\nThis library will convert raw SDP into JSON that mirrors the structure of\nXMPP Jingle content, making it simple to convert the SDP data into an XMPP \nstanza with any of the various JS XMPP libraries, such as [stanza.io](https://github.com/legastero/stanza.io),\nor [xmpp-ftw](https://github.com/lloydwatkin/xmpp-ftw).\n\nAnd since you're working with WebRTC, be sure to check out\n[simplewebrtc](http://simplewebrtc.com).\n\n\n## Installing\n\n```\nnpm install sdp-jingle-json\n```\n\n## Building bundled/minified version (for AMD, etc)\n\n```sh\n$ grunt\n```\n\nThe bundled and minified files will be in the generated `build` directory.\n\n## How to use it\n\n```\nvar sjj = require('sdp-jingle-json');\n\n// I have SDP, but want JSON:\nvar json = sjj.toSessionJSON(sdpBlob, 'initiator'); // or 'responder'\n\n// I have JSON (a dictionary of session and content descriptions), but want SDP:\nvar sdp = sjj.toSessionSDP(jsonSession);\n```\n\nYou can also use `toMediaSDP` and `toMediaJSON` to convert only a single media section.\n\n## See it in action\n\nOpen the `convert.html` file and enter in SDP or JSON to see how it converts back and forth.\n\n## Jingle JSON\n\nThe format for the generated JSON content is:\n\n```\n{\n    \"action\": \"\",\n    \"initiator\": \"\",\n    \"responder\": \"\",\n    \"sid\": \"\",\n    // ---- Content payload\n    \"groups\": [\n        {\n            \"semantics\": \"\",\n            \"contents\": [],\n        } //...\n    ],\n    \"contents\": [\n        {\n           \"name\": \"\",\n           \"creator\": \"\",\n           \"senders\": \"\",\n           \"description\": {\n               // ---- RTP description\n               \"descType\": \"rtp\",\n               \"media\": \"\",\n               \"ssrc\": \"\",\n               \"sourceGroups\": [\n                    {\n                        \"semantics\": \"\",\n                        \"sources\": [\n                            \"\" //...\n                        ]\n                    } //...\n               ],\n               \"sources\": [\n                   {\n                       \"ssrc\": \"\",\n                       \"parameters: [\n                           {\n                               \"key\": \"\",\n                               \"value\": \"\"\n                           } //...\n                       ]\n                   } //...\n               ],\n               \"bandwidth\": \"\",\n               \"bandwidthType\": \"\",\n               \"headerExtensions\": [\n                   {\n                       \"id\": \"\",\n                       \"uri\": \"\",\n                       \"senders\": \"\"\n                   } //...\n               ],\n               \"payloads\": [\n                   {\n                       \"id\": \"\",\n                       \"channels\": \"\",\n                       \"clockrate\": \"\",\n                       \"maxptime\": \"\",\n                       \"ptime\": \"\",\n                       \"name\": \"\",\n                       \"parameters\": [\n                           {\n                               \"key\": \"\",\n                               \"value\": \"\"\n                           } //...\n                       ],\n                       \"feedback\": [\n                           {\n                               \"type\": \"\",\n                               \"subtype\": \"\",\n                               \"value\": \"\"\n                           } //...\n                       ]\n                   }\n                ],\n                \"encryption\": [\n                    {\n                        \"cipherSuite\": \"\",\n                        \"keyParams\": \"\",\n                        \"sessionParams\": \"\",\n                        \"tag\": \"\"\n                    } //...\n                ]\n           },\n           \"transport\": {\n               // ---- ICE UDP transport\n               \"transType\": \"iceUdp\",\n               \"ufrag\": \"\",\n               \"pwd\": \"\",\n               \"setup\": \"\",\n               \"candidates\": [\n                   {\n                       \"component\": \"\",\n                       \"foundation\": \"\",\n                       \"generation\": \"\",\n                       \"id\": \"\",\n                       \"ip\": \"\",\n                       \"network\": \"\",\n                       \"port\": \"\",\n                       \"priority\": \"\",\n                       \"protocol\": \"\",\n                       \"relAddr\": \"\",\n                       \"relPort\": \"\",\n                       \"type\": \"\"\n                   } //...\n               ],\n               \"fingerprints\": [\n                   {\n                   \"hash\": \"\",\n                   \"value\": \"\"\n                   } // ...\n               ]\n           }\n        } //...\n    ]\n}\n```\n\n## License\n\nMIT\n\n## Created By\n\nIf you like this, follow [@lancestout](http://twitter.com/lancestout) or [@HCornflower](http://twitter.com/HCornflower) on twitter.\n\nSDP-Jingle-JSON is derived, in collaboration, from the work done by Philipp Hancke for [strophe.jingle](https://github.com/estos/strophe.jingle).\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/legastero/sdp-jingle-json",
  "_id": "sdp-jingle-json@1.0.0",
  "dist": {
    "shasum": "484af26c8013b1cf24fe3cbb03d629832a9b465f"
  },
  "_from": "sdp-jingle-json@1.x",
  "_resolved": "https://registry.npmjs.org/sdp-jingle-json/-/sdp-jingle-json-1.0.0.tgz"
}
